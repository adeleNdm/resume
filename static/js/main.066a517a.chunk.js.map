{"version":3,"sources":["components/FullPage.js","components/DownIcon.js","sections/TitlesAndIcons.js","sections/AboutSection.js","components/SkillCard.js","sections/SkillSection.js","App.js","serviceWorker.js","index.js"],"names":["FullPage","children","this","props","className","Component","DownIcon","onClick","style","display","flexDirection","alignItems","justifyContent","marginBottom","transform","maxWidth","src","icon","TitlesAndIcons","state","color","changeColor","setState","onMouseOver","onMouseLeave","data","title","subtitle","Object","keys","links","map","key","url","contact","activeClass","to","spy","smooth","offset","duration","delay","icons","down","console","log","name","AboutSection","sections","items","p","content","content1","SkillCard","skill","image","SkillSection","eachSkill","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ktDAYeA,G,6KATH,IACAC,EAAaC,KAAKC,MAAlBF,SACR,OACE,yBAAKG,UAAS,mBAAcF,KAAKC,MAAMC,WAAa,KACjDH,O,GALcI,cCwBRC,EAxBE,SAACH,GAChB,OACE,yBACEI,QAASJ,EAAMI,QACfC,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,WAAY,SACZC,eAAgB,SAChBC,aAAc,QACdC,UAAW,sBAGb,yBACEN,MAAO,CACLO,SAAU,SAIZ,yBAAKC,IAAKb,EAAMc,U,qCCoDTC,E,4MAzDbC,MAAQ,CACNC,MAAO,a,EAETC,YAAc,WACZ,EAAKC,SAAS,CACZF,MAA4B,cAArB,EAAKD,MAAMC,MAAwB,QAAU,e,uDAG9C,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAUhB,UAAU,SAClB,wBACEA,UAAU,QACVI,MAAO,CAAEY,MAAOlB,KAAKiB,MAAMC,OAC3BG,YAAa,WACX,EAAKF,eAEPG,aAAc,WACZ,EAAKH,gBAGNI,EAAKC,OAER,6BACE,4BAAKD,EAAKE,WAEZ,yBAAKvB,UAAU,gBACZwB,OAAOC,KAAKJ,EAAKK,OAAOC,KAAI,SAACC,GAC5B,OACE,yBAAK5B,UAAU,QACb,kBAAC,aAAD,CAAY6B,IAAKR,EAAKK,MAAME,UAKpC,6BACE,4BAAKP,EAAKS,WAGd,kBAAC,OAAD,CACEC,YAAY,SACZC,GAAG,QACHC,KAAK,EACLC,QAAQ,EACRC,OAAQ,GACRC,SAAU,IACVC,MAAO,KAEP,kBAAC,EAAD,CAAUxB,KAAMQ,EAAKiB,MAAMC,KAAMpC,QAAS,kBAAMqC,QAAQC,IAAI,UAE9D,kBAAC,UAAD,CAASC,KAAK,QAAQ1C,UAAU,iB,GApDXC,aCUd0C,G,6KAnBX,OACE,kBAAC,EAAD,CAAU3C,UAAU,UAClB,4BAAKqB,EAAKuB,SAAS,GAAGtB,OACtB,yBAAKtB,UAAU,cACZqB,EAAKuB,SAAS,GAAGC,MAAMlB,KAAI,SAACmB,GAC3B,OAEE,uBAAG9C,UAAU,eACV8C,EAAEC,QADL,IACc,6BACXD,EAAEE,mB,GAXQ/C,cCgBZgD,G,6KAfH,IACAC,EAAUpD,KAAKC,MAAfmD,MACR,OACE,yBAAKlD,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKY,IAAKsC,EAAMH,QAAQI,SAE1B,yBAAKnD,UAAU,uBACb,4BAAKkD,EAAMH,QAAQzB,a,GATLrB,cCsBTmD,G,6KAnBX,OACE,kBAAC,EAAD,CAAUpD,UAAU,SAClB,4BAAKqB,EAAKuB,SAAS,GAAGtB,OAEtB,yBAAKtB,UAAU,iBACZqB,EAAKuB,SAAS,GAAGC,MAAMlB,KAAI,SAAC0B,GAC3B,OACE,kBAAC,EAAD,CAAWH,MAAOG,a,GATLpD,c,MC6CZqD,MA1Cf,WACE,OACE,yBAAKtD,UAAU,OA+Bb,yBAAKA,UAAU,eACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCjCcuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.066a517a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./FullPage.css\";\r\nclass FullPage extends Component {\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <div className={`fullpage ${this.props.className || \"\"}`}>\r\n        {children}</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FullPage;\r\n","import React, { Component } from \"react\";\r\n\r\nconst DownIcon = (props) => {\r\n  return (\r\n    <div\r\n      onClick={props.onClick}\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        marginBottom: \"-60px\",\r\n        transform: \"translateY(-65px)\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          maxWidth: \"50px\",\r\n          \r\n        }}\r\n      >\r\n        <img src={props.icon} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default DownIcon;\r\n","import React, { Component } from \"react\";\r\nimport Fullpage from \"../components/FullPage\";\r\nimport DownIcon from \"../components/DownIcon\";\r\nimport data from \"../data.json\";\r\nimport { SocialIcon } from \"react-social-icons\";\r\nimport \"./TitlesAndIcons.css\";\r\nimport { findRenderedComponentWithType } from \"react-dom/test-utils\";\r\nimport {\r\n  Link,\r\n  Element,\r\n  Events,\r\n  animateScroll as scroll,\r\n  scrollSpy,\r\n  scroller,\r\n} from \"react-scroll\";\r\nclass TitlesAndIcons extends Component {\r\n  state = {\r\n    color: \"steelblue\",\r\n  };\r\n  changeColor = () => {\r\n    this.setState({\r\n      color: this.state.color === \"steelblue\" ? \"white\" : \"steelblue\",\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Fullpage className=\"first\">\r\n          <h1\r\n            className=\"title\"\r\n            style={{ color: this.state.color }}\r\n            onMouseOver={() => {\r\n              this.changeColor();\r\n            }}\r\n            onMouseLeave={() => {\r\n              this.changeColor();\r\n            }}\r\n          >\r\n            {data.title}\r\n          </h1>\r\n          <div>\r\n            <h2>{data.subtitle}</h2>\r\n          </div>\r\n          <div className=\"icon-wrapper\">\r\n            {Object.keys(data.links).map((key) => {\r\n              return (\r\n                <div className=\"icon\">\r\n                  <SocialIcon url={data.links[key]} />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div>\r\n            <h2>{data.contact}</h2>\r\n          </div>\r\n        </Fullpage>\r\n        <Link\r\n          activeClass=\"active\"\r\n          to=\"about\"\r\n          spy={true}\r\n          smooth={true}\r\n          offset={50}\r\n          duration={500}\r\n          delay={300}\r\n        >\r\n          <DownIcon icon={data.icons.down} onClick={() => console.log(\"im\")} />\r\n        </Link>\r\n        <Element name=\"about\" className=\"element\"></Element>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TitlesAndIcons;\r\n","import React, { Component } from \"react\";\r\nimport Fullpage from \"../components/FullPage\";\r\nimport data from \"../data.json\";\r\nimport \"./AboutSection.css\";\r\nclass AboutSection extends Component {\r\n  render() {\r\n    return (\r\n      <Fullpage className=\"second\">\r\n        <h3>{data.sections[0].title}</h3>\r\n        <div className=\"paragraphs\">\r\n          {data.sections[0].items.map((p) => {\r\n            return (\r\n              \r\n              <p className=\"contentSize\">\r\n                {p.content} <br />\r\n                {p.content1}\r\n              </p>\r\n            );\r\n          })}\r\n        </div>\r\n      </Fullpage>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AboutSection;\r\n","import React, { Component } from \"react\";\r\nimport \"./SkillCard.css\";\r\nimport data from \"../data.json\";\r\n\r\nclass SkillCard extends Component {\r\n  render() {\r\n    const { skill } = this.props;\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"image-wrapper\">\r\n          <img src={skill.content.image} />\r\n        </div>\r\n        <div className=\"skill-title-wrapper\">\r\n          <h4>{skill.content.title}</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SkillCard;\r\n","import React, { Component } from \"react\";\r\nimport Fullpage from \"../components/FullPage\";\r\nimport data from \"../data.json\";\r\nimport SkillCard from \"../components/SkillCard\";\r\nimport './SkillSection.css';\r\nclass SkillSection extends Component {\r\n  render() {\r\n    return (\r\n      <Fullpage className=\"third\">\r\n        <h3>{data.sections[1].title}</h3>\r\n        \r\n        <div className=\"cards-wrapper\">\r\n          {data.sections[1].items.map((eachSkill) => {\r\n            return (\r\n              <SkillCard skill={eachSkill}/>\r\n            );\r\n          })}\r\n        \r\n        </div>\r\n        \r\n      \r\n      </Fullpage>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SkillSection;\r\n","import React from \"react\";\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport TitlesAndIcons from \"./sections/TitlesAndIcons\";\nimport AboutSection from \"./sections/AboutSection\";\nimport SkillSection from \"./sections/SkillSection\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Router>\n        <div>\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li>\n                <Link to={\"/\"} className=\"nav-link\">\n                  {\" \"}\n                  Home{\" \"}\n                </Link>\n              </li>\n              <li>\n                <Link to={\"/about\"} className=\"nav-link\">\n                  About\n                </Link>\n              </li>\n              <li>\n                <Link to={\"/skills\"} className=\"nav-link\">\n                  Skills\n                </Link>\n              </li>\n            </ul>\n          </nav>\n          <hr />\n          <Switch>\n            <Route exact path=\"/\" component={TitlesAndIcons} />\n            <Route path=\"/contact\" component={AboutSection} />\n            <Route path=\"/about\" component={SkillSection} />\n          </Switch>\n        </div>\n      </Router> */}\n      <div className=\"navigation\" />\n      <TitlesAndIcons />\n      <AboutSection />\n      \n      <SkillSection />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}